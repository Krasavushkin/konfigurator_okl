import React from 'react';
import styles from './CapacityStatus.module.css';

export interface CapacityInfo {
    cableCount: number;
    usedArea: number;
    maxArea: number;
    freeArea: number;
    isFull: boolean;
}

interface CapacityStatusProps {
    capacityInfo?: CapacityInfo | null;
    className?: string;
    compact?: boolean;
    availableCables?: any[];
}


export const CapacityStatus: React.FC<CapacityStatusProps> = ({
                                                                  capacityInfo,
                                                                  className = '',
                                                                  compact = false,
                                                                  availableCables = []
                                                              }) => {
    if (!capacityInfo) {
        return (
            <div className={`${styles.capacityInfo} ${className}`}>
                <div className={styles.capacityRow}>
                    <span>–°—Ç–∞—Ç—É—Å:</span>
                    <span className={styles.noData}>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</span>
                </div>
            </div>
        );
    }

    // üîß –£–õ–£–ß–®–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –° –¢–ò–ü–ê–ú–ò –ü–†–ò–ß–ò–ù
    const getRealStatus = (): {
        status: 'add-cable' | 'almost-full' | 'full';
        reason?: string;
        reasonType?: 'volume' | 'cable-count' | 'no-space-for-cables';
    } => {
        if (capacityInfo.cableCount >= 8) {
            return {
                status: 'full',
                reason: '–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∫–∞–±–µ–ª–µ–π',
                reasonType: 'cable-count'
            };
        }

        if (capacityInfo.usedArea >= capacityInfo.maxArea) {
            return {
                status: 'full',
                reason: '–û–±—ä–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–µ–Ω',
                reasonType: 'volume'
            };
        }

        if (availableCables.length > 0) {
            const freeArea = capacityInfo.maxArea - capacityInfo.usedArea;
            const canAddAnyCable = availableCables.some(cable => {
                if (!cable.outerDiameter) return false;
                const cableArea = Math.PI * Math.pow(cable.outerDiameter / 2, 2);
                return cableArea <= freeArea;
            });

            if (!canAddAnyCable) {
                return {
                    status: 'full',
                    reason: '–í –û–ö–õ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –¥–ª—è –ª—é–±–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∫–∞–±–µ–ª—è. –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –û–ö–õ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ –∫–∞–±–µ–ª—å –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π.',
                    reasonType: 'no-space-for-cables'
                };
            }
        }

        const isAlmostFull = capacityInfo.cableCount >= 6 || capacityInfo.usedArea >= capacityInfo.maxArea * 0.8;
        return {
            status: isAlmostFull ? 'almost-full' : 'add-cable',
            reasonType: isAlmostFull ? 'volume' : undefined
        };
    };

    const realStatus = getRealStatus();

    const getStatusText = (): string => {
        switch (realStatus.status) {
            case 'full': return '–û–ö–õ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞';
            case 'almost-full': return '–ü–æ—á—Ç–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞';
            default: return '–ì–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é';
        }
    };

    // üîß –£–ú–ù–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –ü–†–û–¶–ï–ù–¢–û–í
    const getDisplayPercentage = (): number => {
        if (realStatus.status === 'full') {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º 100% —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –æ–±—ä–µ–º–æ–º
            if (realStatus.reasonType === 'volume' || realStatus.reasonType === 'no-space-for-cables') {
                return 100;
            }
            // –ü—Ä–∏ –ª–∏–º–∏—Ç–µ –∫–∞–±–µ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ–±—ä–µ–º–∞
        }

        return Math.min((capacityInfo.usedArea / capacityInfo.maxArea) * 100, 100);
    };

    const displayPercentage = getDisplayPercentage();
    const statusText = getStatusText();

    // üîß –ö–û–ú–ü–ê–ö–¢–ù–ê–Ø –í–ï–†–°–ò–Ø
    if (compact) {
        return (
            <div className={`${styles.capacityInfo} ${styles.compact} ${className}`}>
                <div className={styles.capacityRow}>
                    <span>–°—Ç–∞—Ç—É—Å:</span>
                    <span className={
                        realStatus.status === 'full' ? styles.error :
                            realStatus.status === 'almost-full' ? styles.warning : styles.success
                    }>
                        {statusText}
                    </span>
                </div>
            </div>
        );
    }

    // üîß –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø
    return (
        <div className={`${styles.capacityInfo} ${className}`}>
            <h3>–í—ã–±—Ä–∞–Ω–Ω–∞—è –û–ö–õ</h3>
            <div className={styles.capacityRow}>
                <span>–°—Ç–∞—Ç—É—Å:</span>
                <span className={
                    realStatus.status === 'full' ? styles.error :
                        realStatus.status === 'almost-full' ? styles.warning : styles.success
                }>
                    {statusText}
                </span>
            </div>
            <div className={styles.capacityRow}>
                <span>–ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å:</span>
                <span>
                    {displayPercentage.toFixed(0)}%
                </span>
            </div>
            {realStatus.status === 'full' && realStatus.reason && (
                <div className={styles.fullReason}>
                    <span>{realStatus.reason}</span>
                </div>
            )}

            {/* –î–≤–æ–π–Ω–∞—è —à–∫–∞–ª–∞ */}
            <div className={styles.doubleBar}>
                <div className={styles.barSection}>
                    <div className={styles.barLabel}>–ö–∞–±–µ–ª–∏ –≤ –û–ö–õ</div>
                    <div className={styles.barContainer}>
                        <div
                            className={`${styles.barFill} ${styles.cableBar} ${
                                capacityInfo.cableCount >= 8 ? styles.danger :
                                    capacityInfo.cableCount >= 6 ? styles.warning : styles.success
                            }`}
                            style={{ width: `${(capacityInfo.cableCount / 8) * 100}%` }}
                        >
                            <span className={styles.barText}>{capacityInfo.cableCount}/8</span>
                        </div>
                    </div>
                </div>

                <div className={styles.barSection}>
                    <div className={styles.barLabel}>–ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –û–ö–õ</div>
                    <div className={styles.barContainer}>
                        <div
                            className={`${styles.barFill} ${styles.volumeBar} ${
                                realStatus.status === 'full' ? styles.danger :
                                    realStatus.status === 'almost-full' ? styles.warning : styles.success
                            }`}
                            style={{ width: `${displayPercentage}%` }}
                        >
                            <span className={styles.barText}>{displayPercentage.toFixed(0)}%</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

/*
export const CapacityStatus: React.FC<CapacityStatusProps> = ({
                                                                  capacityInfo,
                                                                  className = '',
                                                                  compact = false,
                                                                  availableCables = []
                                                              }) => {
    // üîß –õ–û–ì–ò–ö–ê –í–´–ù–ï–°–ï–ù–ê –ù–ï–ü–û–°–†–ï–î–°–¢–í–ï–ù–ù–û –í –ö–û–ú–ü–û–ù–ï–ù–¢
    const getRealStatus = (): { status: 'add-cable' | 'almost-full' | 'full'; reason?: string } => {
        if (!capacityInfo) return { status: 'add-cable' };

        // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∫–∞–±–µ–ª–µ–π - —Ç–æ—á–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ
        if (capacityInfo.cableCount >= 8) {
            return { status: 'full', reason: '–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∫–∞–±–µ–ª–µ–π' };
        }

        // –ï—Å–ª–∏ –æ–±—ä–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–µ–Ω - —Ç–æ—á–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ
        if (capacityInfo.usedArea >= capacityInfo.maxArea) {
            return { status: 'full', reason: '–û–±—ä–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–µ–Ω' };
        }

        // üîß –ü–†–û–í–ï–†–ö–ê: –º–æ–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –•–û–¢–Ø –ë–´ –û–î–ò–ù –∫–∞–±–µ–ª—å –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
        if (availableCables.length > 0) {
            const freeArea = capacityInfo.maxArea - capacityInfo.usedArea;
            const canAddAnyCable = availableCables.some(cable => {
                if (!cable.outerDiameter) return false;
                const cableArea = Math.PI * Math.pow(cable.outerDiameter / 2, 2);
                return cableArea <= freeArea;
            });

            if (!canAddAnyCable) {
                return {
                    status: 'full',
                    reason: '–í –û–ö–õ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –¥–ª—è –ª—é–±–æ–≥–æ –∫–∞–±–µ–ª—è'
                };
            }
        }

        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ—á—Ç–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        const isAlmostFull = capacityInfo.cableCount >= 6 || capacityInfo.usedArea >= capacityInfo.maxArea * 0.8;
        return { status: isAlmostFull ? 'almost-full' : 'add-cable' };
    };

    const realStatus = getRealStatus();

    const getStatusText = (): string => {
        switch (realStatus.status) {
            case 'full': return '–û–ö–õ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞';
            case 'almost-full': return '–ü–æ—á—Ç–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞';
            default: return '–ì–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é';
        }
    };

    // üîß –ï–°–õ–ò –û–ö–õ –ó–ê–ü–û–õ–ù–ï–ù–ê - –ü–û–ö–ê–ó–´–í–ê–ï–ú 100% –ó–ê–ü–û–õ–ù–ï–ù–ù–û–°–¢–¨
    if (!capacityInfo) {
        return <div className={`${styles.capacityInfo} ${className}`}>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</div>;
    }
    const getDisplayPercentage = (): number => {
        if (realStatus.status === 'full') return 100;
        return Math.min((capacityInfo.usedArea / capacityInfo.maxArea) * 100, 100);
    };



    const displayPercentage = getDisplayPercentage();
    const statusText = getStatusText();
    const fillPercentage = (capacityInfo.usedArea / capacityInfo.maxArea) * 100;
    const cablePercentage = (capacityInfo.cableCount / 8) * 100;


    // üîß –ö–û–ú–ü–ê–ö–¢–ù–ê–Ø –í–ï–†–°–ò–Ø
    if (compact) {
        return (
            <div className={`${styles.capacityInfo} ${styles.compact} ${className}`}>
                <div className={styles.capacityRow}>
                    <span>–ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –û–ö–õ –∫–∞–±–µ–ª–µ–º:</span>
                    <span className={
                        realStatus.status === 'full' ? styles.error :
                            realStatus.status === 'almost-full' ? styles.warning : styles.success
                    }>
                        {statusText}
                    </span>
                </div>
            </div>
        );
    }

    // üîß –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø
    return (
        <div className={`${styles.capacityInfo} ${className}`}>
            <div className={styles.capacityRow}>
                <span>–í—ã–±—Ä–∞–Ω–Ω–∞—è –û–ö–õ:</span>
                <span className={
                    realStatus.status === 'full' ? styles.error :
                        realStatus.status === 'almost-full' ? styles.warning : styles.success
                }>
                    {statusText}
                </span>
            </div>
            <div className={styles.capacityRow}>
                <span>–ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å:</span>
                <span>
                    {displayPercentage.toFixed(1)}%
                    {realStatus.status === 'full' && capacityInfo.usedArea < capacityInfo.maxArea}
                </span>
            </div>



            {/!* üîß –ü–û–Ø–°–ù–ï–ù–ò–ï –ï–°–õ–ò –û–ö–õ –ó–ê–ü–û–õ–ù–ï–ù–ê *!/}
            {realStatus.status === 'full' && realStatus.reason && (
                <div className={styles.fullReason}>
                    <span>{realStatus.reason}</span>
                </div>
            )}

            {/!* –î–≤–æ–π–Ω–∞—è —à–∫–∞–ª–∞ *!/}
            <div className={styles.doubleBar}>
                <div className={styles.barSection}>
                    <div className={styles.barLabel}>–ö–∞–±–µ–ª–∏ –≤ –û–ö–õ</div>
                    <div className={styles.barContainer}>
                        <div
                            className={`${styles.barFill} ${styles.cableBar} ${
                                capacityInfo.cableCount >= 8 ? styles.danger :
                                    capacityInfo.cableCount >= 6 ? styles.warning : styles.success
                            }`}
                            style={{ width: `${cablePercentage}%` }}
                        >
                            <span className={styles.barText}>{capacityInfo.cableCount}/8</span>
                        </div>
                    </div>
                </div>

                <div className={styles.barSection}>
                    <div className={styles.barLabel}>–ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –û–ö–õ</div>
                    <div className={styles.barContainer}>
                        <div
                            className={`${styles.barFill} ${styles.volumeBar} ${
                                realStatus.status === 'full' ? styles.danger :
                                    realStatus.status === 'almost-full' ? styles.warning : styles.success
                            }`}
                            style={{
                                width: `${displayPercentage}%`
                            }}
                        >
                            <span className={styles.barText}>{displayPercentage.toFixed(0)}%</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};*/
