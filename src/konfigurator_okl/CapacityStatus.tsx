// components/CapacityStatus.tsx
import React from 'react';
import styles from './CapacityStatus.module.css';

export interface CapacityInfo {
    cableCount: number;
    usedArea: number;
    maxArea: number;
    freeArea: number;
    isFull: boolean;
}

interface CapacityStatusProps {
    capacityInfo?: CapacityInfo | null;
    className?: string;
    compact?: boolean;
}

export const CapacityStatus: React.FC<CapacityStatusProps> = ({
                                                                  capacityInfo,
                                                                  className = '',
                                                                  compact = false
                                                              }) => {
    // üîß –õ–û–ì–ò–ö–ê –í–´–ù–ï–°–ï–ù–ê –ù–ï–ü–û–°–†–ï–î–°–¢–í–ï–ù–ù–û –í –ö–û–ú–ü–û–ù–ï–ù–¢
    const getStatus = (): 'add-cable' | 'almost-full' | 'full' => {
        if (!capacityInfo) return 'add-cable';

        const isFull = capacityInfo.cableCount >= 8 || capacityInfo.usedArea >= capacityInfo.maxArea;
        const isAlmostFull = capacityInfo.cableCount >= 6 || capacityInfo.usedArea >= capacityInfo.maxArea * 0.8;

        if (isFull) return 'full';
        if (isAlmostFull) return 'almost-full';
        return 'add-cable';
    };

    const getStatusText = (status: 'add-cable' | 'almost-full' | 'full'): string => {
        switch (status) {
            case 'full': return '–ó–∞–ø–æ–ª–Ω–µ–Ω–æ';
            case 'almost-full': return '–ü–æ—á—Ç–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ';
            default: return '–î–æ–±–∞–≤—å—Ç–µ –∫–∞–±–µ–ª—å';
        }
    };

    if (!capacityInfo) {
        return (
            <div className={`${styles.capacityInfo} ${className}`}>
                <div className={styles.capacityRow}>
                    <span>–°—Ç–∞—Ç—É—Å:</span>
                    <span className={styles.noData}>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</span>
                </div>
            </div>
        );
    }

    const status = getStatus();
    const statusText = getStatusText(status);
    const fillPercentage = (capacityInfo.usedArea / capacityInfo.maxArea) * 100;
    const cablePercentage = (capacityInfo.cableCount / 8) * 100;

    // üîß –ö–û–ú–ü–ê–ö–¢–ù–ê–Ø –í–ï–†–°–ò–Ø
    if (compact) {
        return (
            <div className={`${styles.capacityInfo} ${styles.compact} ${className}`}>
                <div className={styles.capacityRow}>
                    <span>–°—Ç–∞—Ç—É—Å:</span>
                    <span className={
                        status === 'full' ? styles.error :
                            status === 'almost-full' ? styles.warning : styles.success
                    }>
                        {statusText}
                    </span>
                </div>
            </div>
        );
    }

    // üîß –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø
    return (
        <div className={`${styles.capacityInfo} ${className}`}>
            <div className={styles.capacityRow}>
                <span>–ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å:</span>
                <span>{fillPercentage.toFixed(1)}%</span>
            </div>

            {/* –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å */}
            <div className={styles.capacityRow}>
                <span>–°—Ç–∞—Ç—É—Å:</span>
                <span className={
                    status === 'full' ? styles.error :
                        status === 'almost-full' ? styles.warning : styles.success
                }>
                    {status === 'full' ? "‚úó –∑–∞–ø–æ–ª–Ω–µ–Ω–æ" :
                        status === 'almost-full' ? "! –ø–æ—á—Ç–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ" : "‚úì –¥–æ–±–∞–≤—å—Ç–µ –∫–∞–±–µ–ª—å"}
                </span>
            </div>

            {/* –î–≤–æ–π–Ω–∞—è —à–∫–∞–ª–∞ */}
            <div className={styles.doubleBar}>
                <div className={styles.barSection}>
                    <div className={styles.barLabel}>–ö–∞–±–µ–ª–∏ –≤ –û–ö–õ</div>
                    <div className={styles.barContainer}>
                        <div
                            className={`${styles.barFill} ${styles.cableBar} ${
                                capacityInfo.cableCount >= 8 ? styles.danger :
                                    capacityInfo.cableCount >= 6 ? styles.warning : styles.success
                            }`}
                            style={{ width: `${cablePercentage}%` }}
                        >
                            <span className={styles.barText}>{capacityInfo.cableCount}/8</span>
                        </div>
                    </div>
                </div>

                <div className={styles.barSection}>
                    <div className={styles.barLabel}>–ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –û–ö–õ</div>
                    <div className={styles.barContainer}>
                        <div
                            className={`${styles.barFill} ${styles.volumeBar} ${
                                capacityInfo.usedArea >= capacityInfo.maxArea ? styles.danger :
                                    capacityInfo.usedArea >= capacityInfo.maxArea * 0.8 ? styles.warning : styles.success
                            }`}
                            style={{ width: `${Math.min(fillPercentage, 100)}%` }}
                        >
                            <span className={styles.barText}>{fillPercentage.toFixed(0)}%</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};