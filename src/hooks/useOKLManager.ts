import {newOKLItem} from "../konfigurator_okl/data";
import {useState} from "react";
import {NewCable} from "../konfigurator_okl/infoOKL/OKLCard";
import {ALL_CABLES, OKL_DB} from "../data";

export const useOKLManager = () => {
    const [oklList, setOklList] = useState<newOKLItem[]>([]);
    const [selectedOKL, setSelectedOKL] = useState<string>('');

    // –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID
    const generateUniqueId = () =>
        Date.now().toString(36) + Math.random().toString(36).slice(2);

    // üîß –£–ü–†–û–©–ï–ù–ù–û–ï –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –û–ö–õ - –∏—â–µ–º –ø–æ ID, –∞ –Ω–µ –ø–æ –∏–º–µ–Ω–∏
    const addOKL = (oklId: string, length: number) => {
        const oklData = OKL_DB.find(o => o.id === oklId);
        if (!oklData) {
            console.error('–û–ö–õ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ:', oklId);
            return null;
        }

        const newOKL: newOKLItem = {
            id: generateUniqueId(),
            name: oklData.name,
            length,
            cables: [],
            sectionOKL: oklData.sectionOKL,
            type: oklData.type,
            TU: oklData.TU,
            description: oklData.description,
        };
        setOklList(prev => [...prev, newOKL]);
        setSelectedOKL(newOKL.id);
        return newOKL.id;
    };

    // üîß –£–ü–†–û–©–ï–ù–ù–û–ï –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–±–µ–ª—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    const addCable = (oklId: string, cableId: string, length: number) => {
        const cableData = ALL_CABLES.find(c => c.id === cableId);
        const okl = oklList.find(o => o.id === oklId);

        if (!cableData || !okl) {
            console.error('–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã:', { cableId, oklId });
            return;
        }

        // üîß –ü–†–û–í–ï–†–ö–ê –í–ú–ï–°–¢–ò–ú–û–°–¢–ò –í –•–£–ö–ï
        if (!canAddCableToOKL(oklId, cableId)) {
            console.error('–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–±–µ–ª—å: –ø—Ä–µ–≤—ã—à–µ–Ω–∞ –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å');
            return;
        }

        const cable: NewCable = {
            id: generateUniqueId(),
            name: cableData.name,
            cableTypeId: cableData.cableTypeId,
            cores: cableData.cores,
            outerDiameter: cableData.outerDiameter,
            TU: cableData.TU,
            length: length,
        };

        setOklList(prev =>
            prev.map(okl =>
                okl.id === oklId ?
                    {...okl, cables: [...okl.cables, cable]} : okl
            )
        );
    };

    // üîß –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–±–µ–ª—è
    /*const canAddCableToOKL = (oklId: string, cableId: string) => {
        const okl = oklList.find(o => o.id === oklId);
        const cableData = ALL_CABLES.find(c => c.id === cableId);

        if (!okl || !cableData) return false;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞–±–µ–ª–µ–π
        if (okl.cables.length >= 8) return false;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–æ—â–∞–¥–∏ —Å–µ—á–µ–Ω–∏—è
        if (okl.sectionOKL && cableData.outerDiameter) {
            const usedArea = calculateUsedArea(okl.cables);
            const newCableArea = calculateCableArea(cableData.outerDiameter);
            return (usedArea + newCableArea) <= okl.sectionOKL;
        }

        return true;
    };*/
    const canAddCableToOKL = (oklId: string, cableId: string): { canAdd: boolean; reason?: string } => {
        const okl = oklList.find(o => o.id === oklId);
        const cableData = ALL_CABLES.find(c => c.id === cableId);

        if (!okl || !cableData) {
            return { canAdd: false};
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞–±–µ–ª–µ–π
        if (okl.cables.length >= 8) {
            return { canAdd: false};
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–æ—â–∞–¥–∏ —Å–µ—á–µ–Ω–∏—è
        if (okl.sectionOKL && cableData.outerDiameter) {
            const usedArea = calculateUsedArea(okl.cables);
            const newCableArea = calculateCableArea(cableData.outerDiameter);

            if ((usedArea + newCableArea) > okl.sectionOKL) {
                return {canAdd: false,};
            }
        }

        return { canAdd: true };
    };

    const canAddAnyCable = (oklId: string, availableCables: any[]): { canAdd: boolean; reason?: string } => {
        const okl = oklList.find(o => o.id === oklId);
        if (!okl) return { canAdd: false};

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞–±–µ–ª–µ–π
        if (okl.cables.length >= 8) {
            return { canAdd: false};
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ –•–û–¢–Ø –ë–´ –û–î–ò–ù –∫–∞–±–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è –ø–æ –æ–±—ä–µ–º—É
        if (okl.sectionOKL) {
            const usedArea = calculateUsedArea(okl.cables);
            const freeArea = okl.sectionOKL - usedArea;

            const canFitAnyCable = availableCables.some(cable => {
                if (!cable.outerDiameter) return false;
                const cableArea = calculateCableArea(cable.outerDiameter);
                return cableArea <= freeArea;
            });

            if (!canFitAnyCable) {
                return {canAdd: false,}
            };
        }

        return { canAdd: true };
    };
    // üîß –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–°–ß–ï–¢–û–í
    const calculateCableArea = (outerDiameter: number): number => {
        const radius = outerDiameter / 2;
        return Math.PI * Math.pow(radius, 2);
    };

    const calculateUsedArea = (cables: NewCable[]): number => {
        return cables.reduce((sum, cable) => {
            if (!cable.outerDiameter) return sum;
            return sum + calculateCableArea(cable.outerDiameter);
        }, 0);
    };

    // üîß –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ –û–ö–õ
    const getOKLCapacityInfo = (oklId: string) => {
        const okl = oklList.find(o => o.id === oklId);
        if (!okl) return null;

        const usedArea = calculateUsedArea(okl.cables);
        const cableCount = okl.cables.length;
        const maxArea = okl.sectionOKL || 0;

        return {
            cableCount,
            usedArea,
            maxArea,
            freeArea: maxArea - usedArea,
            isFull: cableCount >= 8 || usedArea >= maxArea
        };
    };

    // –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–±–µ–ª—è
    const removeCable = (oklId: string, cableId: string) => {
        setOklList(prev => prev.map(okl => okl.id === oklId ?
                { ...okl, cables: okl.cables.filter(c => c.id !== cableId) } : okl
            )
        );
    };

    // –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ–π –û–ö–õ
    const deleteOKL = (oklId: string) => {
        setOklList(prev => prev.filter(okl => okl.id !== oklId));
    };

    // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –û–ö–õ
    const copyOKL = (oklId: string) => {
        const original = oklList.find(o => o.id === oklId);
        if (!original) return;
        const copy: newOKLItem = {
            ...original,
            id: generateUniqueId(),
            cables: original.cables.map(c => ({ ...c, id: generateUniqueId() })),
        };
        setOklList(prev => [...prev, copy]);
    };

    return {
        oklList,
        selectedOKL,
        setSelectedOKL,
        addOKL,
        addCable,
        removeCable,
        deleteOKL,
        copyOKL,
        canAddCableToOKL, // üîß –≠–ö–°–ü–û–†–¢–ò–†–£–ï–ú –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò
        getOKLCapacityInfo,

        canAddAnyCable
    };
};



/*
import {newOKLItem} from "../konfigurator_okl/data";
import {useState} from "react";
import {NewCable} from "../konfigurator_okl/infoOKL/OKLCard";
import {ALL_CABLES, OKL_DB} from "../data";

export const useOKLManager = () => {
    const [oklList, setOklList] = useState<newOKLItem[]>([]);
    const [selectedOKL, setSelectedOKL] = useState<string>('');

    // –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID
    const generateUniqueId = () =>
        Date.now().toString(36) + Math.random().toString(36).slice(2);

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –û–ö–õ
    const addOKL = (oklName: string, length: number) => {
        const oklData = OKL_DB.find(o => o.name === oklName);
        if (!oklData) {
            console.error('–û–ö–õ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ:', oklName);
            return;
        }

        const newOKL: newOKLItem = {
            id: generateUniqueId(),
            name: oklData.name,
            length,
            cables: [],
            sectionOKL: oklData.sectionOKL,
            type: oklData.type,
            TU: oklData.TU,
            description: oklData.description,
        };
        setOklList(prev => [...prev, newOKL]);
        setSelectedOKL(newOKL.id);
    };

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–±–µ–ª—è –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é –û–ö–õ
    const addCable = (oklId: string, cableId: string, length: number) => {
        const cableData = ALL_CABLES.find(c => c.id === cableId);
        if (!cableData) {
            console.error('–ö–∞–±–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ:', cableId);
            return;
        }

        const cable: NewCable = {
            id: generateUniqueId(),
            name: cableData.name,
            cableTypeId: cableData.cableTypeId,
            cores: cableData.cores,
            outerDiameter: cableData.outerDiameter,
            TU: cableData.TU,
            length: length,
        };

        setOklList(prev =>
            prev.map(okl =>
                okl.id === oklId ?
                    {...okl, cables: [...okl.cables, cable]} : okl
            )
        );
    };


    // –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–±–µ–ª—è
    const removeCable = (oklId: string, cableId: string) => {
        setOklList(prev => prev.map(okl => okl.id === oklId ?
                { ...okl, cables: okl.cables.filter(c => c.id !== cableId) } : okl
            )
        );
    };

    // –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ–π –û–ö–õ
    const deleteOKL = (oklId: string) => {
        setOklList(prev => prev.filter(okl => okl.id !== oklId));
    };

    // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –û–ö–õ
    const copyOKL = (oklId: string) => {
        const original = oklList.find(o => o.id === oklId);
        if (!original) return;
        const copy: newOKLItem = {
            ...original,
            id: generateUniqueId(),
            cables: original.cables.map(c => ({ ...c, id: generateUniqueId() })),
        };
        setOklList(prev => [...prev, copy]);
    };




    return {
        oklList,
        selectedOKL,
        setSelectedOKL,
        addOKL,
        addCable,
        removeCable,
        deleteOKL,
        copyOKL,
    };
};
*/
