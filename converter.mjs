// converter.mjs
import * as XLSX from "xlsx";
import { readFileSync, writeFileSync, mkdirSync, existsSync } from "fs";
import { dirname } from "path";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
const outputDir = `${__dirname}/src/data/cables`;
if (!existsSync(outputDir)) {
    mkdirSync(outputDir, { recursive: true });
    console.log(`üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: ${outputDir}`);
}

// –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
const fileBuffer = readFileSync("cables.xlsx");
const workbook = XLSX.read(fileBuffer, { type: "buffer" });

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –º–∞—Å—Å–∏–≤–æ–≤
const parseMaybeArray = (value) => {
    if (typeof value === "string") {
        try {
            const parsed = JSON.parse(value);
            return Array.isArray(parsed) ? parsed : [parsed];
        } catch {
            return value
                .replace(/[\[\]"]/g, "")
                .split(",")
                .map(v => v.trim())
                .filter(Boolean);
        }
    }
    return Array.isArray(value) ? value : [value];
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–∞–±–µ–ª—è
const normalizeCableData = (item) => {
    const fixedItem = { ...item };

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –ø–æ–ª—è
    if (fixedItem.cores) fixedItem.cores = Number(fixedItem.cores);
    if (fixedItem.coreSection) fixedItem.coreSection = Number(fixedItem.coreSection);
    if (fixedItem.outerDiameter) fixedItem.outerDiameter = Number(fixedItem.outerDiameter);

    // –ü–∞—Ä—Å–∏–º –º–∞—Å—Å–∏–≤—ã –µ—Å–ª–∏ –µ—Å—Ç—å
    if ("compatibleSuspensions" in fixedItem) {
        fixedItem.compatibleSuspensions = parseMaybeArray(fixedItem.compatibleSuspensions);
    }
    if ("compatibleSurfaces" in fixedItem) {
        fixedItem.compatibleSurfaces = parseMaybeArray(fixedItem.compatibleSurfaces);
    }
    if ("oklType" in fixedItem) {
        fixedItem.oklType = parseMaybeArray(fixedItem.oklType);
    }

    return fixedItem;
};

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ª–∏—Å—Ç
workbook.SheetNames.forEach((sheetName, index) => {
    console.log(`üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–∏—Å—Ç ${index + 1}/${workbook.SheetNames.length}: ${sheetName}`);

    const sheet = workbook.Sheets[sheetName];
    let data = XLSX.utils.sheet_to_json(sheet);

    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –ª–∏—Å—Ç—ã
    if (data.length === 0) {
        console.log(`‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç–æ–π –ª–∏—Å—Ç: ${sheetName}`);
        return;
    }

    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
    data = data.map(normalizeCableData);

    // –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ –ª–∏—Å—Ç–∞
    const fileName = sheetName.toLowerCase()
        .replace(/\s+/g, '_')
        .replace(/[^a-z0-9_]/g, '');

    const outputPath = `${outputDir}/${fileName}.json`;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON —Ñ–∞–π–ª
    writeFileSync(outputPath, JSON.stringify(data, null, 2), "utf8");
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: ${fileName}.json (${data.length} –∑–∞–ø–∏—Å–µ–π)`);
});

console.log(`üéâ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–æ–∑–¥–∞–Ω–æ ${workbook.SheetNames.length} —Ñ–∞–π–ª–æ–≤ –≤ ${outputDir}`);


/*
import * as XLSX from "xlsx";
import { readFileSync, writeFileSync } from "fs";

// —á–∏—Ç–∞–µ–º –±–∏–Ω–∞—Ä–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ Excel
const fileBuffer = readFileSync("cables.xlsx");

// —Å–æ–∑–¥–∞—ë–º workbook
const workbook = XLSX.read(fileBuffer, { type: "buffer" });

// –ø–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç
const sheetName = workbook.SheetNames[7];
const sheet = workbook.Sheets[sheetName];

// –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JSON
let data = XLSX.utils.sheet_to_json(sheet);

// üß† –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—è compatibleSuspensions –∏ compatibleSurfaces
data = data.map(item => {
    const fixedItem = { ...item };

    const parseMaybeArray = (value) => {
        if (typeof value === "string") {
            try {
                const parsed = JSON.parse(value);
                return Array.isArray(parsed) ? parsed : [parsed];
            } catch {
                // –ü–æ–ø—Ä–æ–±—É–µ–º –≤—Ä—É—á–Ω—É—é —É–±—Ä–∞—Ç—å —Å–∫–æ–±–∫–∏ –∏ –∫–∞–≤—ã—á–∫–∏
                return value
                    .replace(/[\[\]"]/g, "")
                    .split(",")
                    .map(v => v.trim())
                    .filter(Boolean);
            }
        }
        return Array.isArray(value) ? value : [value];
    };

    if ("compatibleSuspensions" in fixedItem) {
        fixedItem.compatibleSuspensions = parseMaybeArray(fixedItem.compatibleSuspensions);
    }

    if ("compatibleSurfaces" in fixedItem) {
        fixedItem.compatibleSurfaces = parseMaybeArray(fixedItem.compatibleSurfaces);
    }

    if ("oklType" in fixedItem) {
        fixedItem.oklType = parseMaybeArray(fixedItem.oklType);
    }

    return fixedItem;
});

console.log(data);

// —Å–æ—Ö—Ä–∞–Ω—è–µ–º JSON –≤ —Ñ–∞–π–ª
writeFileSync("cables.json", JSON.stringify(data, null, 2), "utf8");
console.log("‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: OKL_DB.json —Å–æ–∑–¥–∞–Ω");
*/

/*
import * as XLSX from "xlsx";
import { readFileSync, writeFileSync } from "fs";

// —á–∏—Ç–∞–µ–º –±–∏–Ω–∞—Ä–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ Excel
const fileBuffer = readFileSync("OKL_DB.xlsx");

// —Å–æ–∑–¥–∞—ë–º workbook
const workbook = XLSX.read(fileBuffer, { type: "buffer" });

// –ø–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç
const sheetName = workbook.SheetNames[0];
const sheet = workbook.Sheets[sheetName];

// –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JSON
const data = XLSX.utils.sheet_to_json(sheet);

console.log(data);

// —Å–æ—Ö—Ä–∞–Ω—è–µ–º JSON –≤ —Ñ–∞–π–ª
writeFileSync("OKL_DB.json", JSON.stringify(data, null, 2), "utf8");
console.log("‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: OKL.json —Å–æ–∑–¥–∞–Ω");
 */
